{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","tempo","setTempo","division","setDivision","delayTime","setDelayTime","useEffect","beatTime","console","log","calcTime","className","Row","as","Group","Col","controlId","sm","Label","Control","value","onChange","currentTarget","options","i","push","key","getTempoOptions","Math","round","formatDelayTime","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TAuFeA,G,MAhFH,WAAO,IAAD,EAEUC,mBAAS,KAFnB,mBAETC,EAFS,KAEFC,EAFE,OAGgBF,mBAAS,KAHzB,mBAGTG,EAHS,KAGCC,EAHD,OAIkBJ,mBAAS,GAJ3B,mBAITK,EAJS,KAIEC,EAJF,KAmChB,OAJAC,oBAAU,YATO,WACf,IAAMC,EAAW,GAAKP,EAChBI,EAAYG,EAAWL,EAC7BM,QAAQC,IAAI,WAAYP,EAAU,WAAYK,GAC9CF,EAAyB,IAAZD,GAMbM,KAIA,yBAAKC,UAAU,gBACb,qDACA,+NAEA,kBAAC,IAAD,CAAMA,UAAU,aACd,kBAAC,IAAD,KACE,kBAAC,IAAKC,IAAN,CAAUC,GAAID,KACZ,kBAAC,IAAKE,MAAN,CAAYD,GAAIE,IAAKC,UAAU,gBAAgBC,GAAI,GACjD,kBAAC,IAAKC,MAAN,CAAYP,UAAU,SAAtB,eACA,kBAAC,IAAKQ,QAAN,CAAcC,MAAOpB,EAAOa,GAAG,SAASQ,SAvC1B,SAAC,GAAkC,IAAfD,EAAc,EAA/BE,cAAiBF,MAC5CnB,EAASmB,KAOa,WAEtB,IADA,IAAMG,EAAU,GACNC,EAAI,GAAIA,GAAK,IAAKA,IAC1BD,EAAQE,KAAK,4BAAQL,MAAOI,EAAGE,IAAG,iBAAYF,IAAMA,IAEtD,OAAOD,EA2BMI,KAGL,kBAAC,IAAKb,MAAN,CAAYD,GAAIE,IAAKC,UAAU,mBAAmBC,GAAI,GACpD,kBAAC,IAAKC,MAAN,CAAYP,UAAU,SAAtB,qBACA,kBAAC,IAAKQ,QAAN,CAAcN,GAAG,SAASO,MAAOlB,EAAUmB,SAzC1B,SAAC,GAAkC,IAAfD,EAAc,EAA/BE,cAAiBF,MAC/CjB,EAAYiB,KAyCA,4BAAQA,MAAM,QAAd,aACA,4BAAQA,MAAM,SAAd,oBACA,4BAAQA,MAAM,OAAd,UACA,4BAAQA,MAAM,QAAd,iBACA,4BAAQA,MAAM,KAAd,WACA,4BAAQA,MAAM,OAAd,kBACA,4BAAQA,MAAM,KAAd,QACA,4BAAQA,MAAM,KAAd,eACA,4BAAQA,MAAM,KAAd,SACA,4BAAQA,MAAM,KAAd,mBAIN,kBAAC,IAAKR,IAAN,KACE,kBAAC,IAAD,KACE,kBAAC,IAAKM,MAAN,CAAYP,UAAU,mBAAtB,cACA,kBAAC,IAAKO,MAAN,CAAYP,UAAU,cAvCV,SAAAP,GAAS,OAAIwB,KAAKC,MAAkB,GAAZzB,GAAkB,GAuClB0B,CAAgB1B,GAApD,WAKR,gCACE,uBAAGO,UAAU,cAAb,iBAAwC,uBAAGoB,KAAK,+BAAR,sBCrE5BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c5cbc4bd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\nimport Card from 'react-bootstrap/Card';\nimport './App.css';\n\nconst App = () => {\n\n  const [tempo, setTempo] = useState(120);\n  const [division, setDivision] = useState(0.25);\n  const [delayTime, setDelayTime] = useState(0);\n\n  const handleTempoChange = ({ currentTarget: { value } }) => {\n    setTempo(value);\n  }\n\n  const handleDivisionChange = ({ currentTarget: { value } }) => {\n    setDivision(value);\n  }\n\n  const getTempoOptions = () => {\n    const options = [];\n    for ( let i = 20; i <= 250; i++ ) {\n      options.push(<option value={i} key={`option_${i}`}>{i}</option>);\n    }\n    return options;\n  }\n\n  const calcTime = () => {\n    const beatTime = 60 / tempo;\n    const delayTime = beatTime * division;\n    console.log('division', division, 'beatTime', beatTime);\n    setDelayTime(delayTime * 1000);\n  }\n\n  const formatDelayTime = delayTime => Math.round(delayTime * 10) / 10;\n\n  useEffect(() => {\n    calcTime();\n  });\n\n  return (\n    <div className=\"App col-lg-8\">\n      <h1>Delay Time Calculator</h1>\n      <p>Older rack effects units, such as the Alesis Quadraverb, lack MIDI sync for their delay effects. I built this tool to\n      help calculate ideal delay effect times for a given tempo and note length.</p>\n      <Card className=\"form-card\">\n        <Form>\n          <Form.Row as={Row}>\n            <Form.Group as={Col} controlId=\"formGridTempo\" sm={6}>\n              <Form.Label className=\"label\">Tempo (bpm)</Form.Label>\n              <Form.Control value={tempo} as=\"select\" onChange={handleTempoChange}>\n                {getTempoOptions()}\n              </Form.Control>\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"formGridDivision\" sm={6}>\n              <Form.Label className=\"label\">Delay Note Length</Form.Label>\n              <Form.Control as=\"select\" value={division} onChange={handleDivisionChange}>\n                <option value=\"0.25\">Sixteenth</option>\n                <option value=\"0.375\">Dotted Sixteenth</option>\n                <option value=\"0.5\">Eighth</option>\n                <option value=\"0.75\">Dotted Eighth</option>\n                <option value=\"1\">Quarter</option>\n                <option value=\"1.5\">Dotted Quarter</option>\n                <option value=\"2\">Half</option>\n                <option value=\"3\">Dotted Half</option>\n                <option value=\"4\">Whole</option>\n                <option value=\"6\">Dotted Whole</option>\n              </Form.Control>\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>    \n            <Col>\n              <Form.Label className=\"label label-row\">Delay time</Form.Label>          \n              <Form.Label className=\"delay-time\">{formatDelayTime(delayTime)} ms</Form.Label>          \n            </Col>\n          </Form.Row>        \n        </Form>\n      </Card>\n      <footer>\n        <p className=\"written-by\">Calculator by <a href=\"https://github.com/wilsontr\">Trevor Wilson</a></p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}